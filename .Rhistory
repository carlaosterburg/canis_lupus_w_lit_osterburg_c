geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5, max=1)+
labs(x="Age Class", y="Survival Rate")+
scale_x_discrete("\nAge Class",labels=xlabsage)+
theme(legend.position="none")
ggsave(here::here("plots", "survival_age_boxplot_18112022.png"),bg="white")
pack_size %>%
ggplot(aes(x=country, y=pack_size, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs( y="Average Pack Size")+
scale_x_discrete(guide=guide_axis(n.dodge=2))
pack_size %>%
ggplot(aes(x=country, y=pack_size, color=country))+
geom_scatterplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs( y="Average Pack Size")+
scale_x_discrete(guide=guide_axis(n.dodge=2))
pack_size %>%
ggplot(aes(x=country, y=pack_size, color=country))+
scatterplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs( y="Average Pack Size")+
scale_x_discrete(guide=guide_axis(n.dodge=2))
function (mapping = NULL, data = NULL, stat = "boxplot", position = "dodge2",
..., outlier.colour = NULL, outlier.color = NULL, outlier.fill = NULL,
outlier.shape = 19, outlier.size = 1.5, outlier.stroke = 0.5,
outlier.alpha = NULL, notch = FALSE, notchwidth = 0.5, varwidth = FALSE,
na.rm = FALSE, orientation = NA, show.legend = NA, inherit.aes = TRUE)
boxplot(pack_size~country, main="Pack Size by Country", xlab="Country", ylab="Pack Size", data=pack_size, col=(c("gold","darkgreen","blue", "darkred", "orange", "violet")))
boxplot(pack_size~country, main="Pack Size by Country", xlab="Country", ylab="Pack Size", data=pack_size, col=(c("gold","darkgreen","blue", "darkred", "orange", "violet")))
plot(x=country, y=pack_size)
plot(x=country, y=pack_size, data=pack_size)
View(pack_size)
plot(x=pack_size$country, y=pack_size$pack_size)
boxplot(x=pack_size$country, y=pack_size$pack_size)
plot(country~pack_size, data=pack_size)
plot(as.factor(pack_size$country)~pack_size$pack_size)
pack_size %>%
ggplot(aes(x=country, y=pack_size, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs( y="Average Pack Size")+
scale_x_discrete(guide=guide_axis(n.dodge=2))
xlabscountrypack <- paste(levels(as.factor(pack_size$country)),"\n(N=",table(pack_size$country),")", sep="")
pack_size %>%
ggplot(aes(x=country, y=pack_size, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Country", y="Average Pack Size")+
scale_x_discrete("\nCountry",labels=xlabscountry)+
theme(legend.position="none")
pack_size
pack_size
pack_size %>%
ggplot(aes(x=country, y=pack_size, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Country", y="Average Pack Size")+
scale_x_discrete("\nCountry",labels=xlabscountrypack)+
theme(legend.position="none")
xlabscountrycubs <- paste(levels(as.factor(litter_size$country)),"\n(N=",table(litter_size$country),")", sep="")
litter_size %>%
ggplot(aes(x=country, y=no_cubs, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Country", y="Average Litter Size")+
scale_x_discrete("\nCountry",labels=xlabscountrycubs)+
theme(legend.position="none")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
mortality_data <- read.csv2(paste0(data.input,"/mortality_13112022.csv"), header=TRUE, sep=";", dec = ".")
survival <- read.csv2(paste0(data.input,"/mortality_18112022_categories.csv"), header=TRUE, sep=";", dec = ".")
forest_loss <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-11-11.rds"))
ecoregions <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_eco2022-11-10.rds"))
devthreats <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_dev_threat2022-11-10.rds"))
protected_areas <-readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_wdpa2022-11-10.rds"))
accessibility <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_access2022-11-10.rds"))
biomes <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_biomes2022-11-13.rds"))
# forest loss
mortality_forloss_ID <- mortality_data %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,forloss_drivers_prj,country,age_class_calc) %>%
rename(ID=study_ID,mortality=calc_surv_rate,forloss=forloss_drivers_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(forloss_standard=scale(forloss))
survival_ID <- survival %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,forloss_drivers_prj,country,age_class_calc) %>%
rename(ID=study_ID,mortality=calc_surv_rate,forloss=forloss_drivers_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(forloss_standard=scale(forloss))
# ecoregions
eco_mort_ID <- mortality_data %>%
left_join(ecoregions, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,ecoregions_wgs,country, age_class_calc) %>%
rename(ID=study_ID,mortality=calc_surv_rate, eco=ecoregions_wgs) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(eco_standard=scale(eco))
# development threats
devthreat_mort_ID <- mortality_data %>%
left_join(devthreats, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,dev_threat_prj_maskf,country,age_class_calc) %>%
rename(ID=study_ID,mortality=calc_surv_rate, devt=dev_threat_prj_maskf) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(devt_standard=scale(devt))
# protected areas
wdpa_mort_ID <- mortality_data %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,wdpa_bin_prj,country,age_class_calc) %>%
rename(ID=study_ID,mortality=calc_surv_rate, wdpa=wdpa_bin_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(wdpa_standard=scale(wdpa))
# accessibility
access_mort_ID <- mortality_data %>%
left_join(accessibility, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,accessibility,country,age_class_calc) %>%
rename(ID=study_ID,mortality=calc_surv_rate, access=accessibility) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(access_standard=scale(access))
# biomes
bio_mort_ID <- mortality_data %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,biomes_wgs,country,age_class_calc) %>%
rename(ID=study_ID,mortality=calc_surv_rate, bio=biomes_wgs) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(bio_standard=scale(bio))
# protected areas
lmpas<- glm(mortality~wdpa_standard,data=wdpa_mort_ID, family="binomial")
plot(lmpas)
print(lmpas)
summary(lmpas)
survival_ID <- survival %>%
left_join(protected_areas,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,wdpa_bin_prj,country,age_class_calc) %>%
rename(ID=study_ID,mortality=calc_surv_rate,wdpa=wdpa_bin_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(wdpa_standard=scale(wdpa))
View(survival_ID)
survival_ID <- survival %>%
left_join(protected_areas,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,wdpa_bin_prj,country,age_class_calc) %>%
rename(ID=study_ID,survival_rate=calc_surv_rate,wdpa=wdpa_bin_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(wdpa_standard=scale(wdpa))
survival_ID <- survival %>%
left_join(protected_areas,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,wdpa_bin_prj,country,age_class_calc) %>%
rename(ID=study_ID,survival_rate=calc_surv_rate,wdpa=wdpa_bin_prj) %>%
mutate(survival_rate=as.numeric(survival_rate)) %>%
mutate(wdpa_standard=scale(wdpa))
lmwdpa <. glm(survival_rate~wdpa_standard, data=survival_ID, family="binomial")
lmwdpa <-glm(survival_rate~wdpa_standard, data=survival_ID, family="binomial")
plot(lmwdpa)
print(lmwdpa)
summary(lmwdpa)
wdpacountry <- glmer(survival_rate~(1|country)+wdpa_standard, data=survival_ID, family="binomial")
summary(wdpacountry)
wdpacountry <- glmer(survival_rate~(1|as.factor(country))+wdpa_standard, data=survival_ID, family="binomial")
wdpacountry <- glmer(survival_rate~(1|as.factor(survival_ID$country))+wdpa_standard, data=survival_ID, family="binomial")
as.factor(survival_ID$country)
wdpacountry <- glmer(survival_rate~(1|country)+wdpa_standard, data=survival_ID, family="binomial")
summary(wdpacountry)
country
wdpacountry <- glmer(survival_rate~(1|survival_ID$country)+wdpa_standard, data=survival_ID, family="binomial")
wdpacountry <- glmer(survival_rate~(1|country)+wdpa_standard, data=survival_ID, family="binomial")
summary(wdpacountry)
class(survival_ID$country)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 9, fig.height = 5, dpi = 500,
retina = 1, fig.showtext = TRUE, layout = "l-page")
rm(list=ls())
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rmapshaper)
library(scico)
library(here)
theme_set(theme_void(base_family = "TrebuchetMS", base_size = 11))
theme_update(
legend.position = "top",
legend.spacing = unit(2, "lines"),
legend.title = element_text(face = "bold")
)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 9, fig.height = 5, dpi = 500,
retina = 1, fig.showtext = TRUE, layout = "l-page")
rm(list=ls())
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rmapshaper)
library(scico)
library(here)
theme_set(theme_void(base_family = "TrebuchetMS", base_size = 11))
theme_update(
legend.position = "top",
legend.spacing = unit(2, "lines"),
legend.title = element_text(face = "bold")
)
## rectangular dsata of coordinates and coutns per country
df_coords <- read_csv2(here::here("data-raw", "geo-raw", "map_locations_07112022.csv"))
## data for world map
sf_countries <-
ne_download(scale = 50, returnclass = "sf") %>%
st_transform(crs = "+proj=moll +R=10567000 +lon_0=0 +x_0=0 +y_0=0 +units=m +towgs84=0,0,0,0,0,0,0 +no_defs")
sf_borders <- rmapshaper::ms_innerlines(sf_countries)
sf_oceans <-
ne_download(category = "physical", type = "ocean", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
sf_graticules <-
ne_download(category = "physical", type = "graticules_30", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
## turn review locations into spatial objects
sf_coords <-
df_coords %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
st_transform(crs = st_crs(sf_countries))
base_map <-
ggplot() +
geom_sf(data = sf_oceans, fill = "#d8e5f0", color = "#d8e5f0", size = .15) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "#ded6c2", size = .15) +
geom_sf(data = sf_graticules, color = "white", size = .1) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "transparent", size = .01) +
geom_sf(data = sf_borders, color = "#e5ddc6", size = .15)
world_map <-base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc),
size = 1.3, color = "white"
) +
geom_sf(
data = sf_coords, aes(shape = exact_loc, fill = year_pub),
size = 1.1, stroke = .3
) +
scale_fill_viridis_c(
option = "D", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(21, 23), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(fill = "#289689", size = 4))
)
world_map
zoom_map <-
base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc, color = year_pub),
size = 1.3, stroke = .8
) +
scale_color_viridis_c(
option = "D", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(1, 5), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(size = 4))
)
## North America
zoom_map +
coord_sf(xlim = c(-18500000, -9000000), ylim = c(3500000, 13000000))
sf_coords
zoom_map <-
base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc, color = year_pub),
size = 1.3, stroke = .8
) +
scale_color_viridis_c(
option = "D", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(1, 5), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(size = 4))
)
## North America
zoom_map +
coord_sf(xlim = c(-18500000, -9000000), ylim = c(3500000, 13000000))
ggsave(here::here("plots", "map_wolf_review_coordinates_year_america_white_d.png"),
width = 4.5, height = 5, dpi = 500, bg = "white")
ggsave(here::here("plots", "map_wolf_review_coordinates_year_america_transp_d.png"),
width = 4.5, height = 5, dpi = 500)
## Europe
zoom_map +
coord_sf(xlim = c(-1200000, 5500000), ylim = c(5500000, 13000000))
ggsave(here::here("plots", "map_wolf_review_coordinates_year_europe_transp_d.png"),
width = 4.5, height = 5, dpi = 500)
ggsave(here::here("plots", "map_wolf_review_coordinates_year_europe_white_d.png"),
width = 4.5, height = 5, dpi = 500, bg = "white")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library("rlist") #to work with lists
library("terra")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
getwd()
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
getwd()
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
View(study_area_size_data)
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
View(study_area_size_data_no_nas)
View(study_area_size_data)
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- terra::rast(paste0(here::here("data-raw","geo-raw"),"/accessibility.tif"))
str(map_raster)
class(map_raster)
crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_access <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_access
saveRDS(extracted_values_mean_access,paste0(data.output,"/data-proc/extracted_values_mean_access",Sys.Date(),".rds"))
combined_buffer_access <- cbind(buffer_new_projection,extracted_values_mean_access)
mapview(combined_buffer_access, zcol="accessibility")
dataframe_combined_buffer_access <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_access)
saveRDS(dataframe_combined_buffer_access,paste0(data.output,"/data-proc/dataframe_combined_buffer_access",Sys.Date(),".rds"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library("rlist") #to work with lists
library("terra")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
get(wd)
getwd()
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- terra::rast(paste0(here::here("data-raw","geo-raw"),"/forloss_drivers_prj.tif"))
str(map_raster)
plot(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_forloss <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_forloss
saveRDS(extracted_values_mean_forloss,paste0(data.output,"/data-proc/extracted_values_mean_forloss",Sys.Date(),".rds"))
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_forloss <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_forloss
saveRDS(extracted_values_mean_forloss,paste0(data.output,"/data-proc/extracted_values_mean_forloss",Sys.Date(),".rds"))
combined_buffer_forloss <- cbind(buffer_new_projection,extracted_values_mean_forloss)
mapview(combined_buffer_forloss, zcol="forloss_drivers_prj")
dataframe_combined_buffer_forloss <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_forloss)
saveRDS(dataframe_combined_buffer_forloss,paste0(data.output,"/data-proc/dataframe_combined_buffer_forloss",Sys.Date(),".rds"))
View(coordinates2)
