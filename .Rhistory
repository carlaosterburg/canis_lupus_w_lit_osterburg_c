knitr::opts_chunk$set(echo = TRUE)
study_area_size_data
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_21062022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
pi
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude)
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=sqrt(study_area_size/2*pi)) %>%
dplyr::select(radius)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
buffer <- st_buffer(coords, buffer_size$radius)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
buffer_size
buffer
buffer <- st_buffer(coords, buffer_size$radius)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
coords
buffer_size
buffer_size$radius
buffer
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_21062022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude)
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=sqrt(study_area_size/2*pi)) %>%
dplyr::select(radius)
buffer_size
View(buffer_size)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
buffer_size$radiu
buffer_size$radius
buffer <- st_buffer(coords, buffer_size$radius)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
buffer
plot(buffer)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
library(mapview)
study_area_size_data
buffer_size <- study_area_size_data %>%
na.omit() %>%
#mutate(radius=sqrt(study_area_size/2*pi)) %>%
dplyr::select(study_area_size)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
buffer <- st_buffer(coords, buffer_size$radius)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
buffer <- st_buffer(coords, buffer_size$radius)
coords
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
buffer <- st_buffer(coords, buffer_size$radius)
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=sqrt(study_area_size/2*pi)) %>%
dplyr::select(radius)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
buffer <- st_buffer(coords, buffer_size$radius)
coords
buffer <- st_buffer(coords, buffer_size$radius)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots"))
data.output <- file.path(here::here("output"))
data.input <- file.path(here::here("data-raw","r-raw"))
coordinate_data <- read.csv2(paste0(data.input,"/map_data_coordinates_correct.csv"), header=TRUE, sep=";", dec = ".")
summary(coordinate_data)
str(coordinate_data)
head(coordinate_data)
coordinate_data <- coordinate_data %>%
mutate(study_area_x_coord = as.numeric(study_area_x_coord)) %>%
mutate(study_area_y_coord = as.numeric(study_area_y_coord))
sf_pts <- (st_as_sf( #<<
coordinate_data, coords = c("study_area_x_coord", "study_area_y_coord"), crs=4326, remove=FALSE))  #<<
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_21062022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude)
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=sqrt(study_area_size/2*pi)) %>%
dplyr::select(radius)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
buffer <- st_buffer(coords, buffer_size$radius)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
st_buffer
buffer <- st_buffer(coords, buffer_size$radius)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326) %>%
spTransform(CRS("+proj=robin"))
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326) %>%
st_transform(CRS("+proj=robin"))
buffer <- st_buffer(coords, buffer_size$radius)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
buffer
View(buffer)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library ("raster") # package to work with rasters
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_21062022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude)
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=sqrt(study_area_size/2*pi)) %>%
dplyr::select(radius)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326) %>%
st_transform(CRS("+proj=robin"))
plot(coords)
coords
buffer <- st_buffer(coords, buffer_size$radius)
plot(buffer)
buffer_size$radius
coords
buffer_size$radius
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_21062022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude)
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=sqrt(study_area_size/2*pi)) %>%
dplyr::select(radius)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326) %>%
st_transform(CRS("+proj=robin"))
mapview(coords)
buffer <- st_buffer(coords, buffer_size$radius)
mapview(buffer)
buffer_size$radius
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/2*pi))*1000) %>%
dplyr::select(radius)
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326) %>%
st_transform(CRS("+proj=robin"))
mapview(coords)
buffer <- st_buffer(coords, buffer_size$radius)
buffer %>%
ggplot() +
geom_sf(lwd=0.1)
mapview((buffer))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
#library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("rlist") #to work with lists
library("rlist") #to work with lists
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_21062022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/2*pi) * 1000)) %>%
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
mapview
mapview(combined)
buf_proj
combined
x+y
plus <- function (x,y) {
x+y
}
x <- 1
y <- 2
plus(x,y)
plus(whatever, bubble)
whatever <- 1
bubble <- 2
plus <- function (x,y) {
x+y
}
plus(whatever, bubble)
list <- list_UTM_points
buffer_size_dataframe <- buffer_size
y <- list(0)
y
nrow(buffer_size_dataframe)
i <-
1
i
list[[i]]
list
buffer_size_dataframe
buffer_size_dataframe
buffer_size_dataframe[i,]
st_buffer(list[[i]], buffer_size_dataframe[i,]
)
nrow(buffer_size_dataframe))
nrow(buffer_size_dataframe)
trial <- function(fish,blubb) {
fish+blubb
}
View(trial)
trial(5,7)
karl <- 5
dog <- 9
trial(karl, dog )
num1 <-2
num2 <-3
num3 <-1
num4 <-3
meanfunc <- function(num1,num2,num3,num4){
(num1+num2+num3+num4)/4
}
View(meanfunc)
meanfunc(num1,num2,num3,num4)
vec1 <- c(1,2,5,12,7)
meanvec <- function(vec1) {
sum(vec1)/length(vec1)
}
meanvec(vec1)
map_raster <- raster(paste0(here::here("data-raw","geo-raw"),"/HFP2009.tif"))
str(map_raster)
# plot(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_hfp <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
mapview(combined)
combined
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- raster(paste0(here::here("data-raw","geo-raw"),"/HFP2009.tif"))
str(map_raster)
# plot(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_hfp <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_hfp
saveRDS(extracted_values_mean_hfp,paste0(data.output,"/data-proc/extracted_values_mean_hfp",Sys.Date(),".rds"))
combined_buffer_hfp <- cbind(buffer_new_projection,extracted_values_mean_hfp)
mapview(combined_buffer_hfp, zcol="extracted_values_mean_hfp")
dataframe_combined_buffer_hfp <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_hfp)
saveRDS(dataframe_combined_buffer_hfp,paste0(data.output,"/data-proc/dataframe_combined_buffer_hfp",Sys.Date(),".rds"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
pack_size_data <- read.csv2(paste0(data.input,"/pack_size_22062022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-06-21.rds"))
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-06-22.rds"))
pack_size_hfp_ID <- pack_size_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,pack_size,extracted_values_mean_hfp) %>%
rename(ID=study_ID,hfp=extracted_values_mean_hfp) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
pack_size_hfp_ID
lm1 <- lm(pack_size~hfp_standard,data=pack_size_hfp_ID)
plot(lm1)
print(lm1)
summary(lm1)
pack_size_hfp_ID <- pack_size_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,pack_size,extracted_values_mean_hfp,country) %>%
rename(ID=study_ID,hfp=extracted_values_mean_hfp) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
lm1 <- lm(pack_size~hfp_standard+country,data=pack_size_hfp_ID)
summary(lm1)
lm2 <- lmer(pack_size~(1|ID)+hfp_standard,data=pack_size_hfp_ID)
pack_size_hfp_ID
lm1 <- lm(pack_size~hfp_standard+country,data=pack_size_hfp_ID)
summary(lm1)
lm2 <- lmer(pack_size~(1|ID)+hfp_standard,data=pack_size_hfp_ID)
