summary(lmeco2)
# development threats
lmdevt<- lm(mortality~devt_standard,data=devthreat_mort_ID)
plot(lmdevt)
print(lmdevt)
summary(lmdevt)
lmdevt2 <- lmer(mortality~(1|ID)+devt_standard,data=devthreat_mort_ID)
summary(lmeco2)
# protected areas
lmpas<- lm(mortality~wdpa_standard,data=wdpa_mort_ID)
plot(lmpas)
print(lmpas)
summary(lmpas)
lmpas2 <- lmer(mortality~(1|ID)+wdpa_standard,data=wdpa_mort_ID)
summary(lmpas)
# accessibility
lmacc<- lm(mortality~access_standard,data=access_mort_ID)
plot(lmacc)
print(lmacc)
summary(lmacc)
lmacc2 <- lmer(mortality~(1|ID)+access_standard,data=access_mort_ID)
summary(lmacc)
# biomes
lmbio<- lm(mortality~bio_standard,data=bio_mort_ID)
plot(lmbio)
print(lmbio)
summary(lmbio)
lmbio2 <- lmer(mortality~(1|ID)+bio_standard,data=bio_mort_ID)
summary(lmbio2)
print(lmpas)
summary(lmpas)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("terra") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
pack_size <- read.csv2(paste0(data.input,"/no_pack_17102022.csv"), header=TRUE, sep=";", dec = ".")
forest_loss <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-11-11.rds"))
ecoregions <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_eco2022-11-10.rds"))
devthreats <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_dev_threat2022-11-10.rds"))
protected_areas <-readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_wdpa2022-11-10.rds"))
accessibility <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_access2022-11-10.rds"))
biomes <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_biomes2022-11-13.rds"))
View(pack_size)
pack_sizes <- read.csv2(paste0(data.input,"/no_pack_17102022.csv"), header=TRUE, sep=";", dec = ".")
rm(pack_size)
# forest loss
forloss_ps_ID <- pack_size %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,pack_size,forloss_drivers_prj) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(forloss_standard=scale(forloss))
# forest loss
forloss_ps_ID <- pack_size %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,pack_sizes,forloss_drivers_prj) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(forloss_standard=scale(forloss))
# forest loss
forloss_ps_ID <- pack_size %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,pack_sizes,forloss_drivers_prj) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(pack_sizes=as.numeric(pack_sizes)) %>%
mutate(forloss_standard=scale(forloss))
# forest loss
forloss_ps_ID <- pack_sizes %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,pack_size,forloss_drivers_prj) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(forloss_standard=scale(forloss))
# forest loss
forloss_ps_ID <- pack_sizes %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,pack_size,forloss_drivers_prj) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(forloss_standard=scale(forloss))
# ecoregions
eco_ps_ID <- pack_sizes %>%
left_join(ecoregions, by="study_ID") %>%
dplyr::select(study_ID,pack_size,ecoregions_wgs) %>%
rename(ID=study_ID,eco=ecoregions_wgs) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(eco_standard=scale(eco))
# development threats
devthreat_ps_ID <- pack_sizes %>%
left_join(devthreats, by="study_ID") %>%
dplyr::select(study_ID,pack_size,dev_threat_prj_maskf) %>%
rename(ID=study_ID, devt=dev_threat_prj_maskf) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(devt_standard=scale(devt))
# protected areas
wdpa_mort_ID <- pack_sizes %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,pack_size,wdpa_bin_prj) %>%
rename(ID=study_ID,wdpa=wdpa_bin_prj) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(wdpa_standard=scale(wdpa))
# accessibility
access_mort_ID <- pack_sizes %>%
left_join(accessibility, by="study_ID") %>%
dplyr::select(study_ID,pack_size,accessibility) %>%
rename(ID=study_ID,access=accessibility) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(access_standard=scale(access))
# biomes
bio_mort_ID <- pack_sizes %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,pack_size,biomes_wgs) %>%
rename(ID=study_ID,bio=biomes_wgs) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(bio_standard=scale(bio))
# forest loss
lmforloss<- lm(pack_size~forloss_standard,data=forloss_ps_ID)
print(lmforloss)
summary(lmforloss)
lmforloss2 <- lmer(pack_size~(1|ID)+forloss_standard,data=forloss_ps_ID)
# ecoregions
lmeco<- lm(mortality~eco_standard,data=eco_ps_ID)
plot(lmeco)
print(lmeco)
# ecoregions
lmeco<- lm(pack_size~eco_standard,data=eco_ps_ID)
plot(lmeco)
print(lmeco)
summary(lmeco)
# development threats
lmdevt<- lm(pack_size~devt_standard,data=devthreat_ps_ID)
plot(lmdevt)
plot(lmdevt)
print(lmdevt)
print(lmdevt)
summary(lmdevt)
# protected areas
lmpas<- lm(pack_size~wdpa_standard,data=wdpa_ps_ID)
wdpa_ps_ID <- pack_sizes %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,pack_size,wdpa_bin_prj) %>%
rename(ID=study_ID,wdpa=wdpa_bin_prj) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(wdpa_standard=scale(wdpa))
access_ps_ID <- pack_sizes %>%
left_join(accessibility, by="study_ID") %>%
dplyr::select(study_ID,pack_size,accessibility) %>%
rename(ID=study_ID,access=accessibility) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(access_standard=scale(access))
bio_ps_ID <- pack_sizes %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,pack_size,biomes_wgs) %>%
rename(ID=study_ID,bio=biomes_wgs) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(bio_standard=scale(bio))
# protected areas
lmpas<- lm(pack_size~wdpa_standard,data=wdpa_ps_ID)
plot(lmpas)
print(lmpas)
summary(lmpas)
lmacc<- lm(pack_size~access_standard,data=mort_ps_ID)
lmacc<- lm(pack_size~access_standard,data=access_ps_ID)
plot(lmacc)
summary(lmacc)
lmbio<- lm(pack_size~bio_standard,data=bio_ps_ID)
plot(lmbio)
plot(lmbio)
print(lmbio)
summary(lmbio)
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-11-11.rds"))
# human footprint
hfp_ps_ID <- pack_sizes %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,pack_size,HFP2009) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
View(human_footprint)
# human footprint
hfp_ps_ID <- pack_sizes %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,pack_size,HFP2009) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
# human footprint
hfp_ps_ID <- pack_sizes %>%
left_join(human_footprint, by="study_ID") %>%
dplyr::select(study_ID,pack_size,HFP2009) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
lmhfp<- lm(pack_size~hfp_standard,data=hfp_ps_ID)
plot(lmhfp)
print(lmhfp)
summary(lmhfp)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("terra") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
litter_sizes <- read.csv2(paste0(data.input,"/no_cubs_17102022.csv"), header=TRUE, sep=";", dec = ".")
forest_loss <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-11-11.rds"))
ecoregions <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_eco2022-11-10.rds"))
devthreats <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_dev_threat2022-11-10.rds"))
protected_areas <-readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_wdpa2022-11-10.rds"))
accessibility <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_access2022-11-10.rds"))
biomes <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_biomes2022-11-13.rds"))
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-11-11.rds"))
View(litter_sizes)
# forest loss
forloss_ls_ID <- litter_sizes %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,no_cubs,forloss_drivers_prj) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(forloss_standard=scale(forloss))
# ecoregions
eco_ls_ID <- litter_sizes %>%
left_join(ecoregions, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,ecoregions_wgs) %>%
rename(ID=study_ID,eco=ecoregions_wgs) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(eco_standard=scale(eco))
# development threats
devthreat_ls_ID <- litter_sizes %>%
left_join(devthreats, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,dev_threat_prj_maskf) %>%
rename(ID=study_ID, devt=dev_threat_prj_maskf) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(devt_standard=scale(devt))
# protected areas
wdpa_ls_ID <- litter_sizes %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,wdpa_bin_prj) %>%
rename(ID=study_ID,wdpa=wdpa_bin_prj) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(wdpa_standard=scale(wdpa))
# accessibility
access_ls_ID <- litter_sizes %>%
left_join(accessibility, by="study_ID") %>%
dplyr::select(study_ID,pack_size,accessibility) %>%
rename(ID=study_ID,access=accessibility) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(access_standard=scale(access))
# human footprint
hfp_ls_ID <- litter_sizes %>%
left_join(human_footprint, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,HFP2009) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(hfp_standard=scale(hfp))
bio_ls_ID <- litter_sizes %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,biomes_wgs) %>%
rename(ID=study_ID,bio=biomes_wgs) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(bio_standard=scale(bio))
# forest loss
lmforloss<- lm(no_cubs~forloss_standard,data=forloss_ls_ID)
plot(lmforloss)
summary(lmforloss)
# ecoregions
lmeco<- lm(no_cubs~eco_standard,data=eco_ls_ID)
plot(lmeco)
summary(lmeco)
# development threats
lmdevt<- lm(no_cubs~devt_standard,data=devthreat_ls_ID)
plot(lmdevt)
summary(lmdevt)
# protected areas
lmpas<- lm(no_cubs~wdpa_standard,data=wdpa_ls_ID)
print(lmpas)
summary(lmpas)
lmacc<- lm(no_cubs~access_standard,data=access_ls_ID)
plot(lmacc)
print(lmacc)
summary(lmacc)
lmacc<- lm(no_cubs~access_standard,data=access_ls_ID)
access_ls_ID <- litter_sizes %>%
left_join(accessibility, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,accessibility) %>%
rename(ID=study_ID,access=accessibility) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(access_standard=scale(access))
lmacc<- lm(no_cubs~access_standard,data=access_ls_ID)
plot(lmacc)
plot(lmacc)
print(lmacc)
print(lmacc)
summary(lmacc)
lmbio<- lm(no_cubs~bio_standard,data=bio_ls_ID)
plot(lmbio)
plot(lmbio)
print(lmbio)
summary(lmbio)
lmhfp<- lm(no_cubs~hfp_standard,data=hfp_ls_ID)
plot(lmhfp)
summary(lmhfp)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 9, fig.height = 5, dpi = 500,
retina = 1, fig.showtext = TRUE, layout = "l-page")
rm(list=ls())
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rmapshaper)
library(scico)
library(here)
theme_set(theme_void(base_family = "TrebuchetMS", base_size = 11))
theme_update(
legend.position = "top",
legend.spacing = unit(2, "lines"),
legend.title = element_text(face = "bold")
)
## rectangular dsata of coordinates and coutns per country
df_coords <- read_csv2(here::here("data-raw", "geo-raw", "map_locations_07112022.csv"))
## data for world map
sf_countries <-
ne_download(scale = 50, returnclass = "sf") %>%
st_transform(crs = "+proj=moll +R=10567000 +lon_0=0 +x_0=0 +y_0=0 +units=m +towgs84=0,0,0,0,0,0,0 +no_defs")
sf_borders <- rmapshaper::ms_innerlines(sf_countries)
sf_oceans <-
ne_download(category = "physical", type = "ocean", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
sf_graticules <-
ne_download(category = "physical", type = "graticules_30", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
## turn review locations into spatial objects
sf_coords <-
df_coords %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
st_transform(crs = st_crs(sf_countries))
base_map <-
ggplot() +
geom_sf(data = sf_oceans, fill = "#d8e5f0", color = "#d8e5f0", size = .15) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "#ded6c2", size = .15) +
geom_sf(data = sf_graticules, color = "white", size = .1) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "transparent", size = .01) +
geom_sf(data = sf_borders, color = "#e5ddc6", size = .15)
world_map <-base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc),
size = 1.3, color = "white"
) +
geom_sf(
data = sf_coords, aes(shape = exact_loc, fill = year_pub),
size = 1.1, stroke = .3
) +
scale_fill_viridis_c(
option = "H", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(21, 23), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(fill = "#289689", size = 4))
)
world_map
ggsave(here::here("plots", "map_coords_year_h_transp.png"),
width = 9, height = 5, dpi = 500)
ggsave(here::here("plots", "map_coords_year_h_white.png"),
width = 9, height = 5, dpi = 500, bg = "white")
world_map <-base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc),
size = 1.3, color = "white"
) +
geom_sf(
data = sf_coords, aes(shape = exact_loc, fill = year_pub),
size = 1.1, stroke = .3
) +
scale_fill_viridis_c(
option = "C", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(21, 23), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(fill = "#289689", size = 4))
)
world_map
world_map <-base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc),
size = 1.3, color = "white"
) +
geom_sf(
data = sf_coords, aes(shape = exact_loc, fill = year_pub),
size = 1.1, stroke = .3
) +
scale_fill_viridis_c(
option = "D", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(21, 23), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(fill = "#289689", size = 4))
)
base_map <-
ggplot() +
geom_sf(data = sf_oceans, fill = "#d8e5f0", color = "#d8e5f0", size = .15) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "#ded6c2", size = .15) +
geom_sf(data = sf_graticules, color = "white", size = .1) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "transparent", size = .01) +
geom_sf(data = sf_borders, color = "#e5ddc6", size = .15)
world_map <-base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc),
size = 1.3, color = "white"
) +
geom_sf(
data = sf_coords, aes(shape = exact_loc, fill = year_pub),
size = 1.1, stroke = .3
) +
scale_fill_viridis_c(
option = "D", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(21, 23), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(fill = "#289689", size = 4))
)
world_map
ggsave(here::here("plots", "map_coords_year_h_transp.png"),
width = 9, height = 5, dpi = 500)
ggsave(here::here("plots", "map_coords_year_h_white.png"),
width = 9, height = 5, dpi = 500, bg = "white")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 9, fig.height = 5, dpi = 500,
retina = 1, fig.showtext = TRUE, layout = "l-page")
rm(list=ls)
rm(list=ls())
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rmapshaper)
library(scico)
library(here)
library(viridis)
theme_set(theme_void(base_family = "TrebuchetMS", base_size = 11))
theme_update(
legend.position = "top",
legend.spacing = unit(2, "lines"),
legend.title = element_text(face = "bold")
)
## rectangular data of counts per country
df_counts <- read_csv2(here::here("data-raw", "geo-raw", "map_countries_03112022.csv"))
## data for world map
sf_countries <-
ne_download(scale = 50, returnclass = "sf") %>%
st_transform(crs = "+proj=moll +R=10567000 +lon_0=0 +x_0=0 +y_0=0 +units=m +towgs84=0,0,0,0,0,0,0 +no_defs")
sf_borders <- rmapshaper::ms_innerlines(sf_countries)
sf_oceans <-
ne_download(category = "physical", type = "ocean", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
sf_graticules <-
ne_download(category = "physical", type = "graticules_30", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
## merge counts with world map
sf_counts <-
sf_countries %>%
dplyr::select("ADM0_A3") %>%
left_join(df_counts, by = c("ADM0_A3" = "country_code"))
ggplot() +
geom_sf(data = sf_oceans, fill = "#d8e5f0", color = "#d8e5f0", size = .15) +
geom_sf(data = sf_countries, fill = "grey92", color = "grey92", size = .15) +
geom_sf(data = sf_graticules, color = "white", size = .1) +
geom_sf(data = sf_counts, aes(fill = country_count), color = "transparent", size = .01) +
geom_sf(data = sf_borders, color = "grey92", size = .15) +
scico::scale_fill_scico(
palette = "bamako", direction = -1, end = .9, name = "Number of Publications",
breaks = seq(3, 18, by = 3), na.value = "grey92",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
)
ggsave(here::here("plots", "map_wolf_review_country_counts_trans.png"),
width = 9, height = 5, dpi = 500)
ggsave(here::here("plots", "map_wolf_review_country_counts_white.png"),
width = 9, height = 5, dpi = 500, bg = "white")
