size = 1.1, stroke = .3
) +
scale_fill_viridis_c(
option = "H", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(21, 23), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(fill = "#289689", size = 4))
)
zoom_map <-
base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc, color = year_pub),
size = 1.3, stroke = .8
) +
scale_color_viridis_c(
option = "D", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(1, 5), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(size = 4))
)
## North America
zoom_map +
coord_sf(xlim = c(-18500000, -9000000), ylim = c(3500000, 13000000))
## Europe
zoom_map +
coord_sf(xlim = c(-1200000, 5500000), ylim = c(5500000, 13000000))
?base_family
theme_set(theme_void(base_family = "Lato", base_size = 11))
theme_update(
legend.position = "top",
legend.spacing = unit(2, "lines"),
legend.title = element_text(face = "bold")
)
base_map <-
ggplot() +
geom_sf(data = sf_oceans, fill = "#d8e5f0", color = "#d8e5f0", size = .15) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "#ded6c2", size = .15) +
geom_sf(data = sf_graticules, color = "white", size = .1) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "transparent", size = .01) +
geom_sf(data = sf_borders, color = "#e5ddc6", size = .15)
world_map <-base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc),
size = 1.3, color = "white"
) +
geom_sf(
data = sf_coords, aes(shape = exact_loc, fill = year_pub),
size = 1.1, stroke = .3
) +
scale_fill_viridis_c(
option = "H", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(21, 23), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(fill = "#289689", size = 4))
)
world_map
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("terra") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
getwd()
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
mortality_data <- read.csv2(paste0(data.input,"/mortality_13112022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-11-11.rds"))
mortality_hfp_ID <- mortality_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,calculated_rate,extracted_values_mean_hfp) %>%
rename(ID=study_ID,mortality=calculated_rate,hfp=extracted_values_mean_hfp) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(hfp_standard=scale(hfp))
human_footprint
mortality_hfp_ID <- mortality_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,calculated_rate,HFP2009) %>%
rename(ID=study_ID,mortality=calc_surv_rate,hfp=HFP2009) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(hfp_standard=scale(hfp))
mortality_hfp_ID <- mortality_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,HFP2009) %>%
rename(ID=study_ID,mortality=calc_surv_rate,hfp=HFP2009) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(hfp_standard=scale(hfp))
head(mortality_hfp_ID)
lm1 <- lm(mortality~hfp_standard,data=mortality_hfp_ID)
plot(lm1)
print(lm1)
lm2 <- lmer(mortality~(1|ID)+hfp_standard,data=mortality_hfp_ID)
summary(lm2)
hfp_standard
mortality_data
human_footprint
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("terra") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
mortality_data <- read.csv2(paste0(data.input,"/MortalityRatesWolfReview21062022_JL_ID.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-06-21.rds"))
mortality_hfp_ID <- mortality_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,calculated_rate,extracted_values_mean_hfp) %>%
rename(ID=study_ID,mortality=calculated_rate,hfp=extracted_values_mean_hfp) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(hfp_standard=scale(hfp))
human_footprint
hfp_standard
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
mortality_data <- read.csv2(paste0(data.input,"/MortalityRatesWolfReview21062022_JL_ID.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-06-21.rds"))
mortality_hfp_ID <- mortality_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,calculated_rate,extracted_values_mean_hfp) %>%
rename(ID=study_ID,mortality=calculated_rate,hfp=extracted_values_mean_hfp) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(hfp_standard=scale(hfp))
lm1 <- lm(mortality~hfp_standard,data=mortality_hfp_ID)
plot(lm1)
print(lm1)
summary(lm1)
lm2 <- lmer(mortality~(1|ID)+hfp_standard,data=mortality_hfp_ID)
summary(lm2)
human_footprint
mortality_data
hfp_standard
hfp
View(human_footprint)
View(mortality_data)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("terra") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
mortality_data <- read.csv2(paste0(data.input,"/mortality_13112022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-11-11.rds"))
mortality_hfp_ID <- mortality_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,HFP2009) %>%
rename(ID=study_ID,mortality=calc_surv_rate,hfp=HFP2009) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(hfp_standard=scale(hfp))
lm1 <- lm(mortality~hfp_standard,data=mortality_hfp_ID)
plot(lm1)
print(lm1)
summary(lm1)
lm2 <- lmer(mortality~(1|ID)+hfp_standard,data=mortality_hfp_ID)
summary(lm2)
boxplot(lm1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
mortality_data <- read.csv2(paste0(data.input,"/mortality_13112022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-06-21.rds"))
mortality_data <- read.csv2(paste0(data.input,"/mortality_13112022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-11-11.rds"))
mortality_data <- read.csv2(paste0(data.input,"/mortality_13112022.csv"), header=TRUE, sep=";", dec = ".")
forest_loss <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-11-11.rds"))
rm(human_footprint)
View(forest_loss)
mortality_forloss_ID <- mortality_data %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,forloss_drivers_prj) %>%
rename(ID=study_ID,mortality=calc_surv_rate,forloss=forloss_drivers_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(forloss_standard=scale(forloss))
lm1 <- lm(mortality~forloss_standard,data=mortality_hfp_ID)
lm1 <- lm(mortality~forloss_standard,data=mortality_forloss_ID)
plot(lm1)
print(lm1)
lm1 <- lm(mortality~forloss_standard,data=mortality_forloss_ID)
plot(lm1)
print(lm1)
summary(lm1)
lm2 <- lmer(mortality~(1|ID)+forloss_standard,data=mortality_forloss_ID)
summary(lm2)
biomes <- readRDS(paste0(data.output, "data-proc/dataframe_combined_buffer_eco2022-10-11.rds"))
biomes <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_eco2022-10-11.rds"))
ecoregions <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_eco2022-10-11.rds"))
ecoregions <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_eco2022-11-10.rds"))
View(ecoregions)
eco_mort_ID <- mortality_data %>%
left_join(ecoregions, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate_ecoregions_wgs) %>%
rename(ID=study_ID,mortality=calc_surv_rate, eco=ecoregions_wgs) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(eco_standard=scale(eco))
eco_mort_ID <- mortality_data %>%
left_join(ecoregions, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,ecoregions_wgs) %>%
rename(ID=study_ID,mortality=calc_surv_rate, eco=ecoregions_wgs) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(eco_standard=scale(eco))
lmeco<- lm(mortality~eco_standard,data=eco_mort_ID)
print(lmeco)
summary(lmeco)
summary(lmeco2)
lmeco2 <- lmer(mortality~(1|ID)+eco_standard,data=eco_mort_ID)
summary(lmeco2)
devthreats <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_devthreat2022-11-10.rds"))
devthreats <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_dev_threat2022-11-10.rds"))
View(devthreats)
devthreat_mort_ID <- mortality_data %>%
left_join(devthreats, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,dev_threat_prj_maskf) %>%
rename(ID=study_ID,mortality=calc_surv_rate, devt=dev_threat_prj_maskf) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(devt_standard=scale(devt))
lmdevt<- lm(mortality~devt_standard,data=devthreat_mort_ID)
plot(lmdevt)
summary(lmdevt)
summary(lmeco2)
protected_areas <-readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_wdpa2022-11-10.rds"))
View(protected_areas)
wdpa_mort_ID <- mortality_data %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,wdpa_bin_prj) %>%
rename(ID=study_ID,mortality=calc_surv_rate, wdpa=wdpa_bin_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(wdpa_standard=scale(wdpa))
lmpas<- lm(mortality~wdpa_standard,data=wdpa_mort_ID)
print(lmpas)
lmpas2 <- lmer(mortality~(1|ID)+wdpa_standard,data=wdpa_mort_ID)
summary(lmpas)
accessibility <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_access2022-11-10.rds"))
View(accessibility)
access_mort_ID <- mortality_data %>%
left_join(accessibility, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,accessibility) %>%
rename(ID=study_ID,mortality=calc_surv_rate, access=accessibility) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(access_standard=scale(access))
lmacc<- lm(mortality~access_standard,data=access_mort_ID)
plot(lmacc)
plot(lmacc)
print(lmacc)
plot(lmacc)
print(lmacc)
summary(lmacc)
print(lmacc)
summary(lmacc)
lmacc2 <- lmer(mortality~(1|ID)+access_standard,data=access_mort_ID)
summary(lmacc)
View(eco_mort_ID)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
#library ("raster") # package to work with rasters
library("rlist") #to work with lists
library("terra")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coords_study_area_14102022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- terra::rast(paste0(here::here("data-raw","geo-raw"),"/biomes_wgs.tif"))
str(map_raster)
plot(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_biomes <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_biomes
saveRDS(extracted_values_mean_biomes,paste0(data.output,"/data-proc/extracted_values_mean_biomes",Sys.Date(),".rds"))
combined_buffer_biomes <- cbind(buffer_new_projection,extracted_values_mean_biomes)
mapview(combined_buffer_biomes, zcol="biomes_wgs")
dataframe_combined_buffer_biomes <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_biomes)
saveRDS(dataframe_combined_buffer_biomes,paste0(data.output,"/data-proc/dataframe_combined_buffer_biomes",Sys.Date(),".rds"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
mortality_data <- read.csv2(paste0(data.input,"/mortality_13112022.csv"), header=TRUE, sep=";", dec = ".")
forest_loss <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-11-11.rds"))
ecoregions <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_eco2022-11-10.rds"))
devthreats <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_dev_threat2022-11-10.rds"))
protected_areas <-readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_wdpa2022-11-10.rds"))
accessibility <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_access2022-11-10.rds"))
# forest loss
mortality_forloss_ID <- mortality_data %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,forloss_drivers_prj) %>%
rename(ID=study_ID,mortality=calc_surv_rate,forloss=forloss_drivers_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(forloss_standard=scale(forloss))
# ecoregions
eco_mort_ID <- mortality_data %>%
left_join(ecoregions, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,ecoregions_wgs) %>%
rename(ID=study_ID,mortality=calc_surv_rate, eco=ecoregions_wgs) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(eco_standard=scale(eco))
# development threats
devthreat_mort_ID <- mortality_data %>%
left_join(devthreats, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,dev_threat_prj_maskf) %>%
rename(ID=study_ID,mortality=calc_surv_rate, devt=dev_threat_prj_maskf) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(devt_standard=scale(devt))
# protected areas
wdpa_mort_ID <- mortality_data %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,wdpa_bin_prj) %>%
rename(ID=study_ID,mortality=calc_surv_rate, wdpa=wdpa_bin_prj) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(wdpa_standard=scale(wdpa))
# accessibility
access_mort_ID <- mortality_data %>%
left_join(accessibility, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,accessibility) %>%
rename(ID=study_ID,mortality=calc_surv_rate, access=accessibility) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(access_standard=scale(access))
# forest loss
lmforloss<- lm(mortality~forloss_standard,data=mortality_forloss_ID)
plot(lmforloss)
print(lmforloss)
summary(lmforloss)
lmforloss2 <- lmer(mortality~(1|ID)+forloss_standard,data=mortality_forloss_ID)
summary(lmforloss2)
# ecoregions
lmeco<- lm(mortality~eco_standard,data=eco_mort_ID)
plot(lmeco)
print(lmeco)
summary(lmeco)
lmeco2 <- lmer(mortality~(1|ID)+eco_standard,data=eco_mort_ID)
summary(lmeco2)
# development threats
lmdevt<- lm(mortality~devt_standard,data=devthreat_mort_ID)
plot(lmdevt)
print(lmdevt)
summary(lmdevt)
lmdevt2 <- lmer(mortality~(1|ID)+devt_standard,data=devthreat_mort_ID)
summary(lmeco2)
# protected areas
lmpas<- lm(mortality~wdpa_standard,data=wdpa_mort_ID)
plot(lmpas)
print(lmpas)
summary(lmpas)
lmpas2 <- lmer(mortality~(1|ID)+wdpa_standard,data=wdpa_mort_ID)
summary(lmpas)
# accessibility
lmacc<- lm(mortality~access_standard,data=access_mort_ID)
plot(lmacc)
print(lmacc)
summary(lmacc)
lmacc2 <- lmer(mortality~(1|ID)+access_standard,data=access_mort_ID)
summary(lmacc)
biomes <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_biomes2022-11-13.rds"))
View(biomes)
bio_mort_ID <- mortality_data %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,biomes_wgs) %>%
rename(ID=study_ID,mortality=calc_surv_rate, bio=biomes_wgs) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(access_standard=scale(bio))
lmacc<- lm(mortality~bio_standard,data=bio_mort_ID)
plot(lmbio)
summary(lmbio)
lmbio2 <- lmer(mortality~(1|ID)+bio_standard,data=bio_mort_ID)
summary(lmbio2)
lmbio<- lm(mortality~bio_standard,data=bio_mort_ID)
plot(lmbio)
print(lmbio)
bio_mort_ID <- mortality_data %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,calc_surv_rate,biomes_wgs) %>%
rename(ID=study_ID,mortality=calc_surv_rate, bio=biomes_wgs) %>%
mutate(mortality=as.numeric(mortality)) %>%
mutate(bio_standard=scale(bio))
lmbio<- lm(mortality~bio_standard,data=bio_mort_ID)
plot(lmbio)
print(lmbio)
summary(lmbio)
lmbio2 <- lmer(mortality~(1|ID)+bio_standard,data=bio_mort_ID)
summary(lmbio2)
# protected areas
lmpas<- lm(mortality~wdpa_standard,data=wdpa_mort_ID)
plot(lmpas)
summary(lmpas)
print(lmpas)
plot(lmpas)
ggplot(data=lmpas)
ggplot(protected_areas$ID,protected_areas$wdpa_bin_prj)
ggplot(aes(protected_areas$ID,protected_areas$wdpa_bin_prj))
ggplot(data=protected_areas,aes(protected_areas$ID,protected_areas$wdpa_bin_prj))
ggplot(data=protected_areas,aes(mortality_data$calc_surv_rate,wdpa_bin_prj))
