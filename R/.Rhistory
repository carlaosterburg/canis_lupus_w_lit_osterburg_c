```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
#library ("mapview") # package to create map
library ("raster") # package to work with raster
library("rlist") #to work with list
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_13102022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
View(combined)
#plot the buffers
```{r plot buffers }
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
library ("mapview") # package to create maps
install.packages("mapview")
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("rlist") #to work with lists
mapview(combined)
map_raster <- raster(paste0(here::here("data-raw","geo-raw"),"/HFP2009.tif"))
map_raster <- raster(paste0(here::here("data-raw","geo-raw"),"/HFP2009.tif"))
str(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)```
```{r message=TRUE, warning=FALSE, paged.print = FALSE}
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("rlist") #to work with lists
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
``` {r data input}
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_13102022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- raster(paste0(here::here("data-raw","geo-raw"),"/HFP2009.tif"))
str(map_raster)
# plot(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_hfp <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_hfp
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
buffer_new_projection <- combined %>%
st_transform(crs =crs(map_raster))
knitr::opts_chunk$set(echo = TRUE)```
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)```
knitr::opts_chunk$set(echo = TRUE)```
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coordinates_study_area_size_13102022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- raster(paste0(here::here("data-raw","geo-raw"),"/HFP2009.tif"))
str(map_raster)
# plot(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs =crs(map_raster))
buffer_new_projection
combined
crs
map_raster
crs(map_raster)
crs = crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
View(crs)
buffer_new_projection <- combined %>%
st_transform(st_crs = crs(map_raster))
extracted_values_mean_hfp <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_hfp
st_crs = crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
buffer_new_projection <- combined %>%
st_transform(sf_crs = crs(map_raster))
map_raste
map_raster
View(map_raster)
combined_buffer_hfp <- cbind(buffer_new_projection,extracted_values_mean_hfp)
mapview(combined_buffer_hfp, zcol="extracted_values_mean_hfp")
dataframe_combined_buffer_hfp <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_hfp)
mapview(combined_buffer_hfp, zcol="extracted_values_mean_hfp")
map_raster
View(st_crs)
View(crs)
HFP2009.tif
str(map_raster)
extracted_values_mean_hfp
tibble
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
pack_size_data <- read.csv2(paste0(data.input,"/pack_size_22062022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-06-22.rds"))
pack_size_hfp_ID <- pack_size_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,pack_size,extracted_values_mean_hfp,country) %>%
rename(ID=study_ID,hfp=extracted_values_mean_hfp) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
lm1 <- lm(pack_size~hfp_standard+country,data=pack_size_hfp_ID)
summary(lm1)
# lm2 <- lmer(pack_size~(1|ID)+hfp_standard,data=pack_size_hfp_ID)
# summary(lm2)
View(pack_size_data)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
pack_size_data <- read.csv2(paste0(data.input,"/no_pack_17102022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-10-14.rds"))
pack_size_hfp_ID <- pack_size_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,pack_size,extracted_values_mean_hfp,country) %>%
rename(ID=study_ID,hfp=extracted_values_mean_hfp) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
View(human_footprint)
View(pack_size_data)
View(human_footprint)
human_footprint
pack_size_hfp_ID <- pack_size_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,pack_size,HFP2009,country) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
View(pack_size_hfp_ID)
lm1 <- lm(pack_size~hfp_standard+country,data=pack_size_hfp_ID)
summary(lm1)
# lm2 <- lmer(pack_size~(1|ID)+hfp_standard,data=pack_size_hfp_ID)
# summary(lm2)
summary(lm2)
lm2 <- lmer(pack_size~(1|ID)+hfp_standard,data=pack_size_hfp_ID)
summary(lm2)
plot(lm1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
no_cubs_data <- read.csv2(paste0(data.input,"/no_cubs_17102022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-10-14.rds"))
View(no_cubs_data)
View(human_footprint)
no_cubs_hfp_ID <- no_cubs_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,no_cubs,HFP2009,country) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(hfp_standard=scale(hfp))
View(no_cubs_hfp_ID)
lm1 <- lm(no_cubs~hfp_standard+country,data=no_cubs_hfp_ID)
ggplot(lm1)
summary(lm1)
plot(lm1)
lm2 <- lmer(no_cubs~(1|ID)+hfp_standard,data=no_cubs_hfp_ID)
lm2 <- lmer(no_cubs~(1|ID)+hfp_standard,data=no_cubs_hfp_ID)
View(lm1)
