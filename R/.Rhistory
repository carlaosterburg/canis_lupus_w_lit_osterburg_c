# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- raster(paste0(here::here("data-raw","geo-raw"),"/HFP2009.tif"))
str(map_raster)
# plot(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs =crs(map_raster))
buffer_new_projection
combined
crs
map_raster
crs(map_raster)
crs = crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
View(crs)
buffer_new_projection <- combined %>%
st_transform(st_crs = crs(map_raster))
extracted_values_mean_hfp <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_hfp
st_crs = crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
buffer_new_projection <- combined %>%
st_transform(sf_crs = crs(map_raster))
map_raste
map_raster
View(map_raster)
combined_buffer_hfp <- cbind(buffer_new_projection,extracted_values_mean_hfp)
mapview(combined_buffer_hfp, zcol="extracted_values_mean_hfp")
dataframe_combined_buffer_hfp <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_hfp)
mapview(combined_buffer_hfp, zcol="extracted_values_mean_hfp")
map_raster
View(st_crs)
View(crs)
HFP2009.tif
str(map_raster)
extracted_values_mean_hfp
tibble
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
pack_size_data <- read.csv2(paste0(data.input,"/pack_size_22062022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-06-22.rds"))
pack_size_hfp_ID <- pack_size_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,pack_size,extracted_values_mean_hfp,country) %>%
rename(ID=study_ID,hfp=extracted_values_mean_hfp) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
lm1 <- lm(pack_size~hfp_standard+country,data=pack_size_hfp_ID)
summary(lm1)
# lm2 <- lmer(pack_size~(1|ID)+hfp_standard,data=pack_size_hfp_ID)
# summary(lm2)
View(pack_size_data)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
pack_size_data <- read.csv2(paste0(data.input,"/no_pack_17102022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-10-14.rds"))
pack_size_hfp_ID <- pack_size_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,pack_size,extracted_values_mean_hfp,country) %>%
rename(ID=study_ID,hfp=extracted_values_mean_hfp) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
View(human_footprint)
View(pack_size_data)
View(human_footprint)
human_footprint
pack_size_hfp_ID <- pack_size_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,pack_size,HFP2009,country) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(pack_size=as.numeric(pack_size)) %>%
mutate(hfp_standard=scale(hfp))
View(pack_size_hfp_ID)
lm1 <- lm(pack_size~hfp_standard+country,data=pack_size_hfp_ID)
summary(lm1)
# lm2 <- lmer(pack_size~(1|ID)+hfp_standard,data=pack_size_hfp_ID)
# summary(lm2)
summary(lm2)
lm2 <- lmer(pack_size~(1|ID)+hfp_standard,data=pack_size_hfp_ID)
summary(lm2)
plot(lm1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("raster") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
no_cubs_data <- read.csv2(paste0(data.input,"/no_cubs_17102022.csv"), header=TRUE, sep=";", dec = ".")
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-10-14.rds"))
View(no_cubs_data)
View(human_footprint)
no_cubs_hfp_ID <- no_cubs_data %>%
left_join(human_footprint,by="study_ID") %>%
dplyr::select(study_ID,no_cubs,HFP2009,country) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(hfp_standard=scale(hfp))
View(no_cubs_hfp_ID)
lm1 <- lm(no_cubs~hfp_standard+country,data=no_cubs_hfp_ID)
ggplot(lm1)
summary(lm1)
plot(lm1)
lm2 <- lmer(no_cubs~(1|ID)+hfp_standard,data=no_cubs_hfp_ID)
lm2 <- lmer(no_cubs~(1|ID)+hfp_standard,data=no_cubs_hfp_ID)
View(lm1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library("rlist") #to work with lists
library("terra")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/coords_study_area_14102022.csv"), header=TRUE, sep=";", dec = ".")
study_area_size_data <- read.csv2(paste0(data.input,"/coords_study_area_14102022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- terra::rast(paste0(here::here("data-raw","geo-raw"),"/accessibility.tif"))
str(map_raster)
crs(map_raster)
plot(map_raster)
View(map_raster)
View(map_raster)
str(map_raster)
crs(map_raster)
class(map_raster)
map_raster
buffer_new_projection
combined
extracted_values_mean_access
mapview(combined_buffer_access, zcol="accessibility")
mapview(combined)
str(map_raster)
class(map_raster)
crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_access <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_access
combined_buffer_access <- cbind(buffer_new_projection,extracted_values_mean_access)
mapview(combined_buffer_access, zcol="accessibility")
dataframe_combined_buffer_access <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_access)
dataframe_combined_buffer_access
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE,
fig.width = 9, fig.height = 5, dpi = 500,
retina = 1, fig.showtext = TRUE, layout = "l-page")
rm(list=ls())
library(tidyverse)
library(sf)
library(rnaturalearth)
library(rmapshaper)
library(scico)
library(here)
theme_set(theme_void(base_family = "TrebuchetMS", base_size = 11))
theme_update(
legend.position = "top",
legend.spacing = unit(2, "lines"),
legend.title = element_text(face = "bold")
)
## rectangular dsata of coordinates and coutns per country
df_coords <- read_csv2(here::here("data-raw", "geo-raw", "map_locations_07112022.csv"))
## data for world map
sf_countries <-
ne_download(scale = 50, returnclass = "sf") %>%
st_transform(crs = "+proj=moll +R=10567000 +lon_0=0 +x_0=0 +y_0=0 +units=m +towgs84=0,0,0,0,0,0,0 +no_defs")
## data for world map
sf_countries <-
ne_download(scale = 50, returnclass = "sf") %>%
st_transform(crs = "+proj=moll +R=10567000 +lon_0=0 +x_0=0 +y_0=0 +units=m +towgs84=0,0,0,0,0,0,0 +no_defs")
sf_borders <- rmapshaper::ms_innerlines(sf_countries)
sf_oceans <-
ne_download(category = "physical", type = "ocean", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
sf_graticules <-
ne_download(category = "physical", type = "graticules_30", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
sf_graticules <-
ne_download(category = "physical", type = "graticules_30", scale = 50, returnclass = "sf") %>%
st_transform(crs = st_crs(sf_countries))
## turn review locations into spatial objects
sf_coords <-
df_coords %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
st_transform(crs = st_crs(sf_countries))
sf_borders <- rmapshaper::ms_innerlines(sf_countries)
base_map <-
ggplot() +
geom_sf(data = sf_oceans, fill = "#d8e5f0", color = "#d8e5f0", size = .15) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "#ded6c2", size = .15) +
geom_sf(data = sf_graticules, color = "white", size = .1) +
geom_sf(data = sf_countries, fill = "#ded6c2", color = "transparent", size = .01) +
geom_sf(data = sf_borders, color = "#e5ddc6", size = .15)
world_map <-base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc),
size = 1.3, color = "white"
) +
geom_sf(
data = sf_coords, aes(shape = exact_loc, fill = year_pub),
size = 1.1, stroke = .3
) +
scale_fill_viridis_c(
option = "D", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(21, 23), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(fill = "#289689", size = 4))
)
world_map
zoom_map <-
base_map +
geom_sf(
data = sf_coords, aes(shape = exact_loc, color = year_pub),
size = 1.3, stroke = .8
) +
scale_color_viridis_c(
option = "D", direction = -1, end = .9, name = "Year of Publication",
guide = guide_colorsteps(
barwidth = unit(11, "lines"), barheight = unit(.5, "lines"),
title.position = "top", order = 1, show.limits = TRUE
)
) +
scale_shape_manual(
values = c(1, 5), name = "Exact Location?", labels = c("No", "Yes"),
guide = guide_legend(title.position = "top", order = 2,
override.aes = list(size = 4))
)
## North America
zoom_map +
coord_sf(xlim = c(-18500000, -9000000), ylim = c(3500000, 13000000))
## Europe
zoom_map +
coord_sf(xlim = c(-1200000, 5500000), ylim = c(5500000, 13000000))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("terra") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
getwd()
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
litter_sizes <- read.csv2(paste0(data.input,"/no_cubs_17102022.csv"), header=TRUE, sep=";", dec = ".")
forest_loss <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-11-11.rds"))
ecoregions <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_eco2022-11-10.rds"))
devthreats <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_dev_threat2022-11-10.rds"))
protected_areas <-readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_wdpa2022-11-10.rds"))
accessibility <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_access2022-11-10.rds"))
biomes <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_biomes2022-11-13.rds"))
human_footprint <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_hfp2022-11-11.rds"))
# forest loss
forloss_ls_ID <- litter_sizes %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,no_cubs,forloss_drivers_prj,country) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(forloss_standard=scale(forloss))
# ecoregions
eco_ls_ID <- litter_sizes %>%
left_join(ecoregions, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,ecoregions_wgs,country) %>%
rename(ID=study_ID,eco=ecoregions_wgs) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(eco_standard=scale(eco))
# development threats
devthreat_ls_ID <- litter_sizes %>%
left_join(devthreats, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,dev_threat_prj_maskf,country) %>%
rename(ID=study_ID, devt=dev_threat_prj_maskf) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(devt_standard=scale(devt))
# protected areas
wdpa_ls_ID <- litter_sizes %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,wdpa_bin_prj,country) %>%
rename(ID=study_ID,wdpa=wdpa_bin_prj) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(wdpa_standard=scale(wdpa))
# accessibility
access_ls_ID <- litter_sizes %>%
left_join(accessibility, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,accessibility,country) %>%
rename(ID=study_ID,access=accessibility) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(access_standard=scale(access))
# biomes
bio_ls_ID <- litter_sizes %>%
left_join(biomes, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,biomes_wgs,country) %>%
rename(ID=study_ID,bio=biomes_wgs) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(bio_standard=scale(bio))
# human footprint
hfp_ls_ID <- litter_sizes %>%
left_join(human_footprint, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,HFP2009,country) %>%
rename(ID=study_ID,hfp=HFP2009) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(hfp_standard=scale(hfp))
dim(access_ls_ID)
summary(access_ls_ID)
class(access_ls_ID)
forloss_ls_ID
lmforloss<- glm(no_cubs~forloss_standard,data=forloss_ls_ID, family="poisson")
plot(lmforloss)
print(lmforloss)
summary(lmforloss)
View(litter_sizes)
lmforloss2 <- glmer(no_cubs~(1|country)+forloss_standard,data=forloss_ls_ID, family="poisson")
fit_quasi <- glm(no_cubs~forloss_standard + factor(country), data=forloss_ls_ID, family="quasipoisson")
summary(fit_quasi)
summary(lmforloss2)
fit_quasi <- glm(no_cubs~forloss_standard + factor(country), data=forloss_ls_ID, family="quasipoisson")
summary(fit_quasi)
lmforloss2 <- glmer(no_cubs~(1|country)+forloss_standard,data=forloss_ls_ID, family="quasipoisson")
lmforloss2 <- glm(no_cubs~(1|country)+forloss_standard,data=forloss_ls_ID, family="quasipoisson")
wdpa_ls_ID_country <- litter_sizes %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,wdpa_bin_prj,country) %>%
rename(ID=study_ID,wdpa=wdpa_bin_prj) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(wdpa_standard=scale(wdpa)) %>%
mutate(as.factor(country))
glmerwdpa<- glmer(no_cubs~(1|country)+wdpa_standard, data = wdpa_ls_ID_country)
plot(glmerwdpa)
print(glmerwdpa)
summary(glmerwdpa)
glmerwdpa<- glmer(no_cubs~(1|country)+wdpa_standard, data = wdpa_ls_ID_country, family="poisson")
glmerwdpa<- glmer(no_cubs~(1|country)+wdpa_standard, data = wdpa_ls_ID_country)
plot(glmerwdpa)
print(glmerwdpa)
summary(glmerwdpa)
wdpaglmm <- lm(no_cubs~country, data=wdpa_ls_ID_country)
plot(wdpaglmm)
print(wdpaglmm)
summary(wdpaglmm)
# protected areas
lmpas<- glm(no_cubs~wdpa_standard,data=wdpa_ls_ID, family="poisson")
plot(lmpas)
print(lmpas)
summary(lmpas)
View(lmpas)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("terra") # package to work with rasters
library("lme4") # package for linear regression
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
litter_sizes <- read.csv2(paste0(data.input,"/no_cubs_17102022.csv"), header=TRUE, sep=";", dec = ".")
protected_areas <-readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_wdpa2022-11-10.rds"))
wdpa_ls_ID <- litter_sizes %>%
left_join(protected_areas, by="study_ID") %>%
dplyr::select(study_ID,no_cubs,wdpa_bin_prj,country) %>%
rename(ID=study_ID,wdpa=wdpa_bin_prj) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(wdpa_standard=scale(wdpa))
# protected areas
lmpas<- glm(no_cubs~wdpa_standard,data=wdpa_ls_ID, family="poisson")
plot(lmpas)
print(lmpas)
summary(lmpas)
# forest loss
forloss_ls_ID <- litter_sizes %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,no_cubs,forloss_drivers_prj,country) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(forloss_standard=scale(forloss))
forest_loss <- readRDS(paste0(data.output, "/data-proc/dataframe_combined_buffer_forloss2022-11-11.rds"))
# forest loss
forloss_ls_ID <- litter_sizes %>%
left_join(forest_loss,by="study_ID") %>%
dplyr::select(study_ID,no_cubs,forloss_drivers_prj,country) %>%
rename(ID=study_ID,forloss=forloss_drivers_prj) %>%
mutate(no_cubs=as.numeric(no_cubs)) %>%
mutate(forloss_standard=scale(forloss))
lmforloss<- glm(no_cubs~forloss_standard,data=forloss_ls_ID, family="poisson")
plot(lmforloss)
summary(lmforloss)
fit_quasi <- glm(no_cubs~forloss_standard + factor(country), data=forloss_ls_ID, family="quasipoisson")
summary(fit_quasi)
lmforloss<- glm(no_cubs~forloss_standard,data=forloss_ls_ID, family="poisson")
lmforloss<- glm(no_cubs~forloss_standard,data=forloss_ls_ID, family="quasipoisson")
plot(lmforloss)
print(lmforloss)
summary(lmforloss)
fit_quasi
countryglm<- glm(no_cubs~ factor(country), family = "quasipoisson")
countryglm<- glm(no_cubs~ factor(country), data=forloss_ls_ID, family = "quasipoisson")
summary(countryglm)
quasicountryglm<- glm(no_cubs~ factor(country), data=forloss_ls_ID, family = "quasipoisson")
summary(countryglm)
quasilmpas <- glm(no_cubs~wdpa_standard,data=wdpa_ls_ID, family="quasipoisson")
summary(quasilmpas)
paquasicountry <- glm(no_cubs~wdpa_standard + factor(country),data=wdpa_ls_ID, family="quasipoisson")
summary(paquasicountry)
