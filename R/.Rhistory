summary(quasiaccesslm)
accesslm2 <- glmer(survival~(1|ID)+access_standard,data=access_surv_ID, "binomial")
summary(accesslm2)
accesslm3 <-glmer(survival~(1|country)+access_standard, data=access_surv_ID, family="binomial")
plot(accesslm3)
print(accesslm3)
summary(accesslm3)
accesslm4 <-glmer(survival~(1|age)+access_standard, data=access_surv_ID, family="binomial")
plot(accesslm4)
print(accesslm4)
summary(accesslm4)
hfplm <- glm(survival~hfp_standard, data=hfp_surv_ID, family="binomial")
plot(hfplm)
print(hfplm)
summary(hfplm)
quasihfplm <- glm(survival~hfp_standard, data=hfp_surv_ID, family="quasibinomial")
summary(quasihfplm)
hfplm2 <- glmer(survival~(1|ID)+hfp_standard,data=hfp_surv_ID, "binomial")
summary(hfplm2)
hfplm3 <-glmer(survival~(1|country)+hfp_standard, data=hfp_surv_ID, family="binomial")
plot(hfplm3)
print(hfplm3)
summary(hfplm3)
hfplm4 <-glmer(survival~(1|age)+hfp_standard, data=hfp_surv_ID, family="binomial")
plot(hfplm4)
print(hfplm4)
summary(hfplm4)
summary(hfplm4)
hfplm3 <-glmer(survival~(1|as.factor(country)+hfp_standard, data=hfp_surv_ID, family="binomial")
hfplm3 <-glmer(survival~(1|(as.factor(country)+hfp_standard, data=hfp_surv_ID, family="binomial")
hfplm3 <-glmer(survival~(1|as.factor(country))+hfp_standard, data=hfp_surv_ID, family="binomial")
hfplm3 <-glmer(survival~(1|country)+hfp_standard, data=hfp_surv_ID, family="binomial")
plot(hfplm3)
print(hfplm3)
summary(hfplm3)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library("rlist") #to work with lists
library("terra")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- terra::rast(paste0(here::here("data-raw","geo-raw"),"/accessibility.tif"))
str(map_raster)
class(map_raster)
crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_access <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_access
saveRDS(extracted_values_mean_access,paste0(data.output,"/data-proc/extracted_values_mean_access",Sys.Date(),".rds"))
combined_buffer_access <- cbind(buffer_new_projection,extracted_values_mean_access)
mapview(combined_buffer_access, zcol="accessibility")
dataframe_combined_buffer_access <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_access)
saveRDS(dataframe_combined_buffer_access,paste0(data.output,"/data-proc/dataframe_combined_buffer_access",Sys.Date(),".rds"))
View(study_area_size_data)
View(study_area_size_data_no_nas)
View(dataframe_combined_buffer_access)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
# library ("raster") # package to work with rasters
library("rlist") #to work with lists
library("terra")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- terra::rast(paste0(here::here("data-raw","geo-raw"),"/HFP2009.tif"))
str(map_raster)
plot(map_raster)
crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_hfp <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_hfp
saveRDS(extracted_values_mean_hfp,paste0(data.output,"/data-proc/extracted_values_mean_hfp",Sys.Date(),".rds"))
View(combined)
combined_buffer_hfp <- cbind(buffer_new_projection,extracted_values_mean_hfp)
mapview(combined_buffer_hfp, zcol="HFP2009")
dataframe_combined_buffer_hfp <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_hfp)
saveRDS(dataframe_combined_buffer_hfp,paste0(data.output,"/data-proc/dataframe_combined_buffer_hfp",Sys.Date(),".rds"))
View(dataframe_combined_buffer_hfp)
knitr::opts_chunk$set(echo = TRUE)
map_raster
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library("rlist") #to work with lists
library("terra")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
map_raster <- terra::rast(paste0(here::here("data-raw","geo-raw"),"/accessibility.tif"))
str(map_raster)
class(map_raster)
crs(map_raster)
map_raster
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_access <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_access
saveRDS(extracted_values_mean_access,paste0(data.output,"/data-proc/extracted_values_mean_access",Sys.Date(),".rds"))
buffer_new_projection
extracted_values_mean_access
buffer_new_projection
extracted_values_mean_access
combined_buffer_access <- cbind(buffer_new_projection,extracted_values_mean_access)
mapview(combined_buffer_access, zcol="accessibility")
dataframe_combined_buffer_access <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_access)
saveRDS(dataframe_combined_buffer_access,paste0(data.output,"/data-proc/dataframe_combined_buffer_access",Sys.Date(),".rds"))
study_area_size_data
buffer_new_projection
extracted_values_mean_access
dataframe_combined_buffer_access
mapview(combined_buffer_access, zcol="accessibility")
accessibility
combined_buffer_access
mapview(combined_buffer_access, zcol="accessibility")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
# library ("raster") # package to work with rasters
library("rlist") #to work with lists
library("terra")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
setwd(here::here())
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
study_area_size_data <- read.csv2(paste0(data.input,"/study_coords_20_12_2022.csv"), header=TRUE, sep=";", dec = ".")
summary(study_area_size_data)
str(study_area_size_data)
#extr cting the study area size and taking out the nas
study_area_size_data_no_nas <- study_area_size_data %>%
na.omit() %>%
dplyr:: select(longitude, latitude) %>%
tibble::rowid_to_column("id")
# calculating the radius of the buffer based on the study area size
buffer_size <- study_area_size_data %>%
na.omit() %>%
mutate(radius=(sqrt(study_area_size/pi) * 1000)) %>% # *1000 to convert to km
dplyr::select(radius)
#transforming the coordinates as spatial object
coords <- st_as_sf(study_area_size_data_no_nas, coords=c("longitude","latitude"), crs=4326)
#function to transform the latitude longitute projection of each poitns into the right UTM
lonlat2UTM = function(lonlat) {
utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
if(lonlat[2] > 0) {
utm + 32600
} else{
utm + 32700
}
}
#to transform in the right projection
transform_list <- function(list, crs_dataframe){
x <- list(0)
for (i in 1: length(crs_dataframe))
x[[i]] <- st_transform(list[[i]], crs_dataframe[i])
return(x)
}
# to create buffers based on a list of spatial objects
buffer_list <- function(list, buffer_size_dataframe){
y <- list(0)
for (i in 1: nrow(buffer_size_dataframe))
y[[i]] <- st_buffer(list[[i]], buffer_size_dataframe[i,])
return(y)
}
#take out the coordinates of the points
coordinates2<- cbind(study_area_size_data_no_nas$longitude, study_area_size_data_no_nas$latitude)
#transforms the coordinates into UTM
coordinatesUTM <- apply(coordinates2, 1, lonlat2UTM)
#creates a list of spatial objects based on their id
ncSplit <- split(coords, f = coords[["id"]])
#using the function to st_transform each element of the list with their corresponding UTM
list_UTM_points <- transform_list(ncSplit, coordinatesUTM)
# Create a list of buffers with their respective radius
buf_proj <- buffer_list(list_UTM_points, buffer_size)
# Retransform the whole shablam into a latitude longitude coordinate system
buf_latlong <- lapply(buf_proj, st_transform, 4326)
#recombining the hwole thing
combined <- list.rbind(buf_latlong)
combined %>%
ggplot() +
geom_sf(lwd = 0.1)
mapview(combined)
map_raster <- terra::rast(paste0(here::here("data-raw","geo-raw"),"/hum_mod_prj_mask.tif"))
str(map_raster)
plot(map_raster)
crs(map_raster)
buffer_new_projection <- combined %>%
st_transform(crs = crs(map_raster))
extracted_values_mean_hmod <- raster::extract(map_raster, buffer_new_projection,fun=mean, na.rm=TRUE)
extracted_values_mean_hmod
saveRDS(extracted_values_mean_hmod,paste0(data.output,"/data-proc/extracted_values_mean_hmod",Sys.Date(),".rds"))
combined_buffer_hfp <- cbind(buffer_new_projection,extracted_values_mean_hmod)
mapview(combined_buffer_hmod, zcol="HFP2009")
mapview(combined_buffer_hmod, zcol="hum_mod_prj_mask")
combined_buffer_hfp <- cbind(buffer_new_projection,extracted_values_mean_hmod)
mapview(combined_buffer_hmod, zcol="hum_mod_prj_mask")
combined_buffer_hmod <- cbind(buffer_new_projection,extracted_values_mean_hmod)
combined_buffer_hmod <- cbind(buffer_new_projection,extracted_values_mean_hmod)
mapview(combined_buffer_hmod, zcol="hum_mod_prj_mask")
dataframe_combined_buffer_hmod <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_hmod)
saveRDS(dataframe_combined_buffer_hfp,paste0(data.output,"/data-proc/dataframe_combined_buffer_hmod",Sys.Date(),".rds"))
combined_buffer_hmod <- cbind(buffer_new_projection,extracted_values_mean_hmod)
mapview(combined_buffer_hmod, zcol="hum_mod_prj_mask")
dataframe_combined_buffer_hmod <- study_area_size_data %>%
na.omit() %>%
cbind(combined_buffer_hmod)
saveRDS(dataframe_combined_buffer_hmod,paste0(data.output,"/data-proc/dataframe_combined_buffer_hmod",Sys.Date(),".rds"))
View(combined_buffer_hmod)
extracted_values_mean_hmod
combined
combined
rm(combined_buffer_hfp)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library("tidyverse") # loads packages tidyr, ggplot2 and dplyr
library("sf") # load sf package used for spatial data
library ("mapview") # package to create maps
library ("terra") # package to work with rasters
library("lme4") # package for linear regression
library("viridis")
library("RColorBrewer")
theme_set(theme_minimal(base_size = 14)) # set ggplot theme
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
survival <- read.csv2(paste0(data.input,"/survival_rates_23122022_categories.csv"), header=TRUE, sep=";", dec = ".")
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
survival <- read.csv2(paste0(data.input,"/survival_rates_23122022_categories.csv"), header=TRUE, sep=";", dec = ".")
data.input
getwd()
setwd("C:/Users/carla/Documents/Master Thesis/canis_lupus_w_lit_osterburg_c")
plots <- file.path(here::here("plots")) # species where to save plots
data.output <- file.path(here::here("output")) # specifies where to save outputs
data.input <- file.path(here::here("data-raw","r-raw"))
survival <- read.csv2(paste0(data.input,"/survival_rates_23122022_categories.csv"), header=TRUE, sep=";", dec = ".")
survival <- read.csv2(paste0(data.input,"/survival_rates_23122022.csv"), header=TRUE, sep=";", dec = ".")
pack_size <- read.csv2(paste0(data.input,"/no_pack_21122022.csv"), header=TRUE, sep=";", dec = ".")
litter_size <- read.csv2(paste0(data.input,"/no_cubs_21122022.csv"), header=TRUE, sep=";", dec = ".")
boxplot(calc_surv_rate~age_class_calc, main="Survival Rate by Age Class", xlab="Age Class", ylab="Survival Rate", data=mortality_data, rm.na="TRUE")
boxplot(calc_surv_rate~age_class_calc, main="Survival Rate by Age Class", xlab="Age Class", ylab="Survival Rate", data=survival, rm.na="TRUE")
survival %>%
ggplot(aes(x=age_class_calc, y=calc_surv_rate, color=age_class_calc))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Age Class", y="Survival Rate")
xlabsage <- paste(levels(as.factor(survival$age_class_calc)),"\n(N=",table(survival$age_class_calc),")", sep="")
survival %>%
ggplot(aes(x=age_class_calc, y=calc_surv_rate, color=age_class_calc))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5, max=1)+
labs(x="Age Class", y="Survival Rate")+
scale_x_discrete("\nAge Class",labels=xlabsage)+
theme(legend.position="none")
ggsave(here::here("plots", "survival_age_boxplot_18112022.png"),bg="white")
ggsave(here::here("plots", "survival_age_boxplot_30122022.png"),bg="white")
boxplot(calc_surv_rate~country, main="Survival Rate by Country", xlab="Country", ylab="Survival Rate", data=survival, col=(c("gold","darkgreen","blue", "darkred", "orange", "violet")))
xlabscountry <- paste(levels(as.factor(survival$country)),"\n(N=",table(survival$country),")", sep="")
survival %>%
ggplot(aes(x=country, y=calc_surv_rate, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Country", y="Survival Rate")+
scale_x_discrete("\nCountry",labels=xlabscountry)+
theme(legend.position="none")
pack_size %>%
ggplot(aes(x=country, y=pack_size, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs( y="Average Pack Size")+
scale_x_discrete(guide=guide_axis(n.dodge=2))
boxplot(pack_size~country, main="Pack Size by Country", xlab="Country", ylab="Pack Size", data=pack_size, col=(c("gold","darkgreen","blue", "darkred", "orange", "violet")))
xlabscountrypack <- paste(levels(as.factor(pack_size$country)),"\n(N=",table(pack_size$country),")", sep="")
pack_size %>%
ggplot(aes(x=country, y=pack_size, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Country", y="Average Pack Size")+
scale_x_discrete("\nCountry",labels=xlabscountrypack)+
theme(legend.position="none")
litter_size %>%
ggplot(aes(x=country, y=no_cubs, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs( y="Average Litter Size")
boxplot(no_cubs~country, main="Litter Size by Country", xlab="Country", ylab="Litter Size", data=litter_size, col=(c("gold","darkgreen","blue", "darkred", "orange", "violet", "yellow", "green")))
xlabscountrycubs <- paste(levels(as.factor(litter_size$country)),"\n(N=",table(litter_size$country),")", sep="")
litter_size %>%
ggplot(aes(x=country, y=no_cubs, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Country", y="Average Litter Size")+
scale_x_discrete("\nCountry",labels=xlabscountrycubs)+
theme(legend.position="none")
xlabscountry <- paste(levels(as.factor(survival$country)),"\n(N=",table(survival$country),")", sep="")
survival %>%
ggplot(aes(x=country, y=calc_surv_rate, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Country", y="Survival Rate")+
scale_x_discrete("\nCountry",labels=xlabscountry)+
theme(legend.position="none")
survival %>%
ggplot(aes(x=country, y=calc_surv_rate, color=country))+
geom_boxplot()+
geom_jitter(width=0.15, alpha=0.5)+
labs(x="Country", y="Survival Rate")+
scale_x_discrete("\nCountry",labels=xlabscountry)+
theme(legend.position="none")
ggsave(here::here("plots", "survival_country_boxplot_30122022.png"),bg="white")
